{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\nif (\"geolocation\" in navigator) {\n  navigator.geolocation.getCurrentPosition(function (position) {\n    var map = new mapboxgl.Map({\n      // container id specified in the HTML\n      container: 'map',\n      // style URL\n      style: 'mapbox://styles/mapbox/dark-v10',\n      // initial position in [lon, lat] format\n      center: [position.coords.longitude, position.coords.latitude],\n      // initial zoom\n      zoom: 14\n    });\n  });\n} else {}\n\nvar fitMapToMarkers = function fitMapToMarkers(map, markers) {\n  var bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(function (marker) {\n    return bounds.extend([marker.lng, marker.lat]);\n  });\n  map.fitBounds(bounds, {\n    padding: 70,\n    maxZoom: 15,\n    duration: 0\n  });\n};\n\nvar initMapbox = function initMapbox() {\n  var mapElement = document.getElementById('map');\n\n  if (mapElement) {\n    // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    var map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/dark-v10'\n    });\n    var markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach(function (marker) {\n      var popup = new mapboxgl.Popup().setHTML(marker.infoWindow); // Create a HTML element for your custom marker\n\n      var element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = \"url('\".concat(marker.image_url, \"')\");\n      element.style.backgroundSize = 'contain';\n      element.style.width = '15px';\n      element.style.height = '15px';\n      element.style.boxShadow = \"0px 0px 12px 1px white\";\n      element.style.borderRadius = \"100px\";\n      element.style.border = \"1px solid white\";\n      new mapboxgl.Marker(element).setLngLat([marker.lng, marker.lat]).setPopup(popup).addTo(map);\n    });\n    map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken\n    }));\n    fitMapToMarkers(map, markers);\n  }\n};\n\nexport { initMapbox };","map":{"version":3,"sources":["/Users/remibongiovanni/code/BTC1M/rails-out/app/javascript/plugins/init_mapbox.js"],"names":["mapboxgl","MapboxGeocoder","navigator","geolocation","getCurrentPosition","position","map","Map","container","style","center","coords","longitude","latitude","zoom","fitMapToMarkers","markers","bounds","LngLatBounds","forEach","marker","extend","lng","lat","fitBounds","padding","maxZoom","duration","initMapbox","mapElement","document","getElementById","accessToken","dataset","mapboxApiKey","JSON","parse","popup","Popup","setHTML","infoWindow","element","createElement","className","backgroundImage","image_url","backgroundSize","width","height","boxShadow","borderRadius","border","Marker","setLngLat","setPopup","addTo","addControl"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAGA,IAAI,iBAAiBC,SAArB,EAAgC;AAC5BA,EAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAAC,QAAQ,EAAI;AACjD,QAAIC,GAAG,GAAG,IAAIN,QAAQ,CAACO,GAAb,CAAiB;AAC3B;AACEC,MAAAA,SAAS,EAAE,KAFc;AAIxB;AACDC,MAAAA,KAAK,EAAE,iCALkB;AAO1B;AACCC,MAAAA,MAAM,EAAE,CAACL,QAAQ,CAACM,MAAT,CAAgBC,SAAjB,EAA4BP,QAAQ,CAACM,MAAT,CAAgBE,QAA5C,CARiB;AAU1B;AAEAC,MAAAA,IAAI,EAAE;AAZoB,KAAjB,CAAV;AAcH,GAfD;AAgBH,CAjBD,MAiBO,CAAG;;AAEV,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACT,GAAD,EAAMU,OAAN,EAAkB;AACxC,MAAMC,MAAM,GAAG,IAAIjB,QAAQ,CAACkB,YAAb,EAAf;AACAF,EAAAA,OAAO,CAACG,OAAR,CAAgB,UAAAC,MAAM;AAAA,WAAIH,MAAM,CAACI,MAAP,CAAc,CAAED,MAAM,CAACE,GAAT,EAAcF,MAAM,CAACG,GAArB,CAAd,CAAJ;AAAA,GAAtB;AACAjB,EAAAA,GAAG,CAACkB,SAAJ,CAAcP,MAAd,EAAsB;AAAEQ,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,OAAO,EAAE,EAAxB;AAA4BC,IAAAA,QAAQ,EAAE;AAAtC,GAAtB;AACD,CAJD;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAnB;;AAEA,MAAIF,UAAJ,EAAgB;AAAE;AAChB7B,IAAAA,QAAQ,CAACgC,WAAT,GAAuBH,UAAU,CAACI,OAAX,CAAmBC,YAA1C;AACA,QAAM5B,GAAG,GAAG,IAAIN,QAAQ,CAACO,GAAb,CAAiB;AAC3BC,MAAAA,SAAS,EAAE,KADgB;AAE3BC,MAAAA,KAAK,EAAE;AAFoB,KAAjB,CAAZ;AAKA,QAAMO,OAAO,GAAGmB,IAAI,CAACC,KAAL,CAAWP,UAAU,CAACI,OAAX,CAAmBjB,OAA9B,CAAhB;AACAA,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAACC,MAAD,EAAY;AAE1B,UAAMiB,KAAK,GAAG,IAAIrC,QAAQ,CAACsC,KAAb,GAAqBC,OAArB,CAA6BnB,MAAM,CAACoB,UAApC,CAAd,CAF0B,CAI1B;;AACA,UAAMC,OAAO,GAAGX,QAAQ,CAACY,aAAT,CAAuB,KAAvB,CAAhB;AACAD,MAAAA,OAAO,CAACE,SAAR,GAAoB,QAApB;AACAF,MAAAA,OAAO,CAAChC,KAAR,CAAcmC,eAAd,kBAAwCxB,MAAM,CAACyB,SAA/C;AACAJ,MAAAA,OAAO,CAAChC,KAAR,CAAcqC,cAAd,GAA+B,SAA/B;AACAL,MAAAA,OAAO,CAAChC,KAAR,CAAcsC,KAAd,GAAsB,MAAtB;AACAN,MAAAA,OAAO,CAAChC,KAAR,CAAcuC,MAAd,GAAuB,MAAvB;AACAP,MAAAA,OAAO,CAAChC,KAAR,CAAcwC,SAAd,GAA0B,wBAA1B;AACAR,MAAAA,OAAO,CAAChC,KAAR,CAAcyC,YAAd,GAA6B,OAA7B;AACAT,MAAAA,OAAO,CAAChC,KAAR,CAAc0C,MAAd,GAAsB,iBAAtB;AAGA,UAAInD,QAAQ,CAACoD,MAAb,CAAoBX,OAApB,EACGY,SADH,CACa,CAAEjC,MAAM,CAACE,GAAT,EAAcF,MAAM,CAACG,GAArB,CADb,EAEG+B,QAFH,CAEYjB,KAFZ,EAGGkB,KAHH,CAGSjD,GAHT;AAID,KApBD;AAqBAA,IAAAA,GAAG,CAACkD,UAAJ,CAAe,IAAIvD,cAAJ,CAAmB;AAAE+B,MAAAA,WAAW,EAAEhC,QAAQ,CAACgC;AAAxB,KAAnB,CAAf;AACAjB,IAAAA,eAAe,CAACT,GAAD,EAAMU,OAAN,CAAf;AACD;AAGF,CArCD;;AAyCA,SAASY,UAAT","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\nif (\"geolocation\" in navigator) { \n    navigator.geolocation.getCurrentPosition(position => { \n        var map = new mapboxgl.Map({\n        // container id specified in the HTML\n          container: 'map',\n\n           // style URL\n          style: 'mapbox://styles/mapbox/dark-v10',\n\n         // initial position in [lon, lat] format\n          center: [position.coords.longitude, position.coords.latitude],\n\n         // initial zoom\n\n         zoom: 14\n        });\n    }); \n} else { }\n\nconst fitMapToMarkers = (map, markers) => {\n  const bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n  map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n};\n\nconst initMapbox = () => {\n  const mapElement = document.getElementById('map');\n\n  if (mapElement) { // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/dark-v10'\n    });\n\n    const markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach((marker) => {\n\n      const popup = new mapboxgl.Popup().setHTML(marker.infoWindow);\n\n      // Create a HTML element for your custom marker\n      const element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = `url('${marker.image_url}')`;\n      element.style.backgroundSize = 'contain';\n      element.style.width = '15px';\n      element.style.height = '15px';\n      element.style.boxShadow = \"0px 0px 12px 1px white\"\n      element.style.borderRadius = \"100px\"\n      element.style.border =\"1px solid white\"\n\n\n      new mapboxgl.Marker(element)\n        .setLngLat([ marker.lng, marker.lat ])\n        .setPopup(popup)\n        .addTo(map);\n    });\n    map.addControl(new MapboxGeocoder({ accessToken: mapboxgl.accessToken }));\n    fitMapToMarkers(map, markers);\n  }\n\n\n};\n\n\n\nexport { initMapbox };\n\n\n"]},"metadata":{},"sourceType":"module"}