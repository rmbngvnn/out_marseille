{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\nvar fitMapToMarkers = function fitMapToMarkers(map, markers) {\n  var bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(function (marker) {\n    return bounds.extend([marker.lng, marker.lat]);\n  });\n  map.fitBounds(bounds, {\n    padding: 70,\n    maxZoom: 15,\n    duration: 0\n  });\n};\n\nvar initMapbox = function initMapbox() {\n  var mapElement = document.getElementById('map');\n\n  if (mapElement) {\n    // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n\n    var _map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/dark-v10'\n    });\n\n    var markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach(function (marker) {\n      var popup = new mapboxgl.Popup().setHTML(marker.infoWindow); // Create a HTML element for your custom marker\n\n      var element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundSize = 'contain';\n      element.style.width = '15px';\n      element.style.height = '15px';\n      element.style.boxShadow = \"0px 0px 12px 1px white\";\n      element.style.borderRadius = \"100px\";\n      element.style.border = \"1px solid white\";\n      element.style.backgroundImage = \"url('\".concat(marker.image_url, \"')\");\n      new mapboxgl.Marker(element).setLngLat([marker.lng, marker.lat]).setPopup(popup).addTo(_map);\n    });\n\n    _map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken\n    }));\n\n    fitMapToMarkers(_map, markers);\n  }\n};\n\nmap.on('click', function (e) {\n  // Use featuresAt to get features within a given radius of the click event\n  // Use layer option to avoid getting results from other layers\n  map.featuresAt(e.point, {\n    layer: 'markers',\n    radius: 10,\n    includeGeometry: true\n  }, function (err, features) {\n    if (err) throw err; // if there are features within the given radius of the click event,\n    // fly to the location of the click event\n\n    if (features.length) {\n      // Get coordinates from the symbol and center the map on those coordinates\n      map.flyTo({\n        center: features[0].geometry.coordinates\n      });\n      var featureName = features[0].properties.name;\n      var tooltip = new mapboxgl.Popup().setLngLat(e.lngLat).setHTML('<p>' + featureName + '</p>').addTo(map);\n    }\n  });\n}); // Use the same approach as above to indicate that the symbols are clickable\n// by changing the cursor style to 'pointer'.\n\nmap.on('mousemove', function (e) {\n  map.featuresAt(e.point, {\n    layer: 'markers',\n    radius: 10\n  }, function (err, features) {\n    if (err) throw err;\n    map.getCanvas().style.cursor = features.length ? 'pointer' : '';\n  });\n});\nexport { initMapbox }; // --------------------------------------------\n// const mapElement = document.getElementById('map');\n// const buildMap = () => {\n//   mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n//   return new mapboxgl.Map({\n//     container: 'map',\n//     style: 'mapbox://styles/mapbox/dark-v10'\n//   });\n// };\n// const addMarkersToMap = (map, markers) => {\n//   markers.forEach((marker) => {\n//     const popup = new mapboxgl.Popup().setHTML(marker.infoWindow); // add this\n//     new mapboxgl.Marker()\n//       .setLngLat([ marker.lng, marker.lat ])\n//       .setPopup(popup) // add this\n//       .addTo(map);\n//   });\n// };\n// const fitMapToMarkers = (map, markers) => {\n//   const bounds = new mapboxgl.LngLatBounds();\n//   markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n//   map.fitBounds(bounds, { padding: 70, maxZoom: 15 });\n// };\n// const initMapbox = () => {\n//   if (mapElement) {\n//     const map = buildMap();\n//     const markers = JSON.parse(mapElement.dataset.markers);\n//     addMarkersToMap(map, markers);\n//     fitMapToMarkers(map, markers);\n//   }\n// };\n// export { initMapbox };","map":{"version":3,"sources":["/Users/remibongiovanni/code/BTC1M/rails-out/app/javascript/plugins/init_mapbox.js"],"names":["mapboxgl","MapboxGeocoder","fitMapToMarkers","map","markers","bounds","LngLatBounds","forEach","marker","extend","lng","lat","fitBounds","padding","maxZoom","duration","initMapbox","mapElement","document","getElementById","accessToken","dataset","mapboxApiKey","Map","container","style","JSON","parse","popup","Popup","setHTML","infoWindow","element","createElement","className","backgroundSize","width","height","boxShadow","borderRadius","border","backgroundImage","image_url","Marker","setLngLat","setPopup","addTo","addControl","on","e","featuresAt","point","layer","radius","includeGeometry","err","features","length","flyTo","center","geometry","coordinates","featureName","properties","name","tooltip","lngLat","getCanvas","cursor"],"mappings":"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","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\nconst fitMapToMarkers = (map, markers) => {\n  const bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n  map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n};\n\nconst initMapbox = () => {\n  const mapElement = document.getElementById('map');\n\n  if (mapElement) { // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/dark-v10'\n    });\n\n    const markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach((marker) => {\n\n      const popup = new mapboxgl.Popup().setHTML(marker.infoWindow);\n\n      // Create a HTML element for your custom marker\n      const element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundSize = 'contain';\n      element.style.width = '15px';\n      element.style.height = '15px';\n      element.style.boxShadow = \"0px 0px 12px 1px white\"\n      element.style.borderRadius = \"100px\"\n      element.style.border =\"1px solid white\"\n      element.style.backgroundImage = `url('${marker.image_url}')`;\n\n\n      new mapboxgl.Marker(element)\n        .setLngLat([ marker.lng, marker.lat ])\n        .setPopup(popup)\n        .addTo(map);\n    });\n    map.addControl(new MapboxGeocoder({ accessToken: mapboxgl.accessToken }));\n    fitMapToMarkers(map, markers);\n  }\n};\n\nmap.on('click', function (e) {\n    // Use featuresAt to get features within a given radius of the click event\n    // Use layer option to avoid getting results from other layers\n    map.featuresAt(e.point, {layer: 'markers', radius: 10, includeGeometry: true}, function (err, features) {\n        if (err) throw err;\n        // if there are features within the given radius of the click event,\n        // fly to the location of the click event\n        if (features.length) {\n            // Get coordinates from the symbol and center the map on those coordinates\n            map.flyTo({center: features[0].geometry.coordinates});\n            var featureName = features[0].properties.name;\n            var tooltip = new mapboxgl.Popup()\n                .setLngLat(e.lngLat)\n                .setHTML('<p>' + featureName + '</p>')\n                .addTo(map);\n        }\n    });\n});\n\n\n// Use the same approach as above to indicate that the symbols are clickable\n// by changing the cursor style to 'pointer'.\nmap.on('mousemove', function (e) {\n    map.featuresAt(e.point, {layer: 'markers', radius: 10}, function (err, features) {\n        if (err) throw err;\n        map.getCanvas().style.cursor = features.length ? 'pointer' : '';\n    });\n});\n\nexport { initMapbox };\n\n// --------------------------------------------\n\n\n// const mapElement = document.getElementById('map');\n\n// const buildMap = () => {\n//   mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n//   return new mapboxgl.Map({\n//     container: 'map',\n//     style: 'mapbox://styles/mapbox/dark-v10'\n//   });\n// };\n\n// const addMarkersToMap = (map, markers) => {\n//   markers.forEach((marker) => {\n//     const popup = new mapboxgl.Popup().setHTML(marker.infoWindow); // add this\n\n//     new mapboxgl.Marker()\n//       .setLngLat([ marker.lng, marker.lat ])\n//       .setPopup(popup) // add this\n//       .addTo(map);\n//   });\n// };\n\n// const fitMapToMarkers = (map, markers) => {\n//   const bounds = new mapboxgl.LngLatBounds();\n//   markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n//   map.fitBounds(bounds, { padding: 70, maxZoom: 15 });\n// };\n\n// const initMapbox = () => {\n//   if (mapElement) {\n//     const map = buildMap();\n//     const markers = JSON.parse(mapElement.dataset.markers);\n//     addMarkersToMap(map, markers);\n//     fitMapToMarkers(map, markers);\n//   }\n// };\n\n\n\n// export { initMapbox };\n\n"]},"metadata":{},"sourceType":"module"}