{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'; // const fitMapToMarkers = (map, markers) => {\n//   const bounds = new mapboxgl.LngLatBounds();\n//   markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n//   map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n// };\n\nvar fitMapToMarkers = function fitMapToMarkers(map, markers) {\n  var bounds = new mapboxgl.LngLatBounds();\n  markers.features.forEach(function (marker) {\n    return bounds.extend([marker.geometry.coordinates[0], marker.geometry.coordinates[1]]);\n  });\n  map.fitBounds(bounds, {\n    padding: 70,\n    maxZoom: 15,\n    duration: 0\n  });\n};\n\nvar initMapbox = function initMapbox() {\n  var mapElement = document.getElementById('map');\n  var filterGroup = document.getElementById('filter-group'); // Only build a map if there's a div#map to inject into\n\n  if (mapElement) {\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    var map = new mapboxgl.Map({\n      container: 'map',\n      // style: 'mapbox://styles/mapbox/dark-v10'\n      style: 'mapbox://styles/remiwagon/cjzjn3hsn50nz1cpgqkuhwfn7'\n    });\n    var markers = JSON.parse(mapElement.dataset.markers);\n    var markersGeoJson = JSON.parse(mapElement.dataset.markersgeojson); // console.log(markers);\n    // console.log(markersGeoJson);\n    // ----------------------------------------------------\n\n    var inputArray = [];\n    var labelArray = [];\n    map.on('load', function () {\n      // Add a GeoJSON source containing place coordinates and information.\n      map.addSource(\"places\", {\n        \"type\": \"geojson\",\n        \"data\": markersGeoJson\n      });\n      markersGeoJson.features.forEach(function (marker) {\n        var symbol = marker.properties.icon['icone'];\n        var category = marker.properties['category'];\n        var layerID = category; // var el = document.createElement('div');\n        // el.className = 'my-icon';\n        // new mapboxgl.Marker(el)\n        //   .setLngLat([ marker.geometry.coordinates[0], marker.geometry.coordinates[1] ])\n        //   .addTo(map);\n        // Add a layer for this marker\n\n        if (!map.getLayer(layerID)) {\n          map.addLayer({\n            \"id\": layerID,\n            \"type\": \"circle\",\n            \"source\": \"places\",\n            \"paint\": {\n              'circle-radius': 8,\n              'circle-opacity': 0.8,\n              'circle-stroke-width': 1,\n\n              /*'circle-stroke-color': 'white',*/\n\n              /*'circle-stroke-opacity': 1,*/\n              'circle-color': ['match', ['get', 'category'], 'Festival', '#00FFF3', 'Rooftop', 'blue', 'Open air', '#FF69B4', 'Pool Party', 'orange', 'Club', '#088C00', 'Beach', 'yellow', 'Bar', 'red', 'Concert', 'purple',\n              /* other */\n              'yellow']\n            },\n            \"filter\": [\"==\", \"category\", category]\n          }); // Add checkbox and label elements for the layer.\n\n          var input = document.createElement('input');\n          input.type = 'checkbox';\n          input.id = layerID;\n          input.checked = true;\n          var label = document.createElement('label');\n          label.setAttribute('for', layerID);\n          label.textContent = category;\n          label.style.backgroundColor = 'black';\n          label.style.fontSize = '12px';\n          label.style.border = '2px solid white';\n          label.style.margin = '15px';\n          label.style.borderRadius = '4px';\n          label.style.boxShadow = '2px 2px 0px white';\n          inputArray.push(input);\n          labelArray.push(label); // When the checkbox changes, update the visibility of the layer.\n\n          input.addEventListener('change', function (e) {\n            map.setLayoutProperty(layerID, 'visibility', e.target.checked ? 'visible' : 'none');\n          });\n        }\n      }); // Pour afficher les checkbox lorsqu'on clique sur Filtrer\n\n      var menuVisible = false;\n      document.getElementById(\"btn-filter-map-id\").addEventListener(\"click\", function (e) {\n        var menu = document.getElementById(\"filter-group\");\n        e.preventDefault();\n        e.stopPropagation();\n\n        for (var i = 0; i < inputArray.length; i++) {\n          filterGroup.appendChild(inputArray[i]);\n          filterGroup.appendChild(labelArray[i]);\n        }\n\n        if (menuVisible) {\n          menu.style.display = \"none\";\n          menuVisible = false;\n        } else {\n          menu.style.display = \"block\";\n          menuVisible = true;\n        }\n      }, false);\n    }); // ----------------------------------------------------\n\n    markersGeoJson.features.forEach(function (marker) {\n      var popup = new mapboxgl.Popup().setHTML(marker.properties.infoWindow); // Create a HTML element for your custom marker\n\n      var styleDefaultMarker = function styleDefaultMarker(element) {\n        element.className = 'test'; // element.style.backgroundSize = 'contain';\n\n        element.style.width = '15px';\n        element.style.height = '15px';\n        element.style.boxShadow = \"0px 0px 3px 1px white\";\n        element.style.borderRadius = \"100px\";\n        element.style.border = \"1px solid white\"; // element.style.backgroundColor = \"#4d4d4d\";\n\n        element.style.position = \"absolute\";\n        element.style.opacity = \"1\";\n      };\n\n      var element = document.createElement('div');\n      styleDefaultMarker(element);\n      new mapboxgl.Marker(element).setLngLat([marker.geometry.coordinates[0], marker.geometry.coordinates[1]]).setPopup(popup).addTo(map);\n      element.addEventListener('click', function (e) {\n        // map.flyTo({center: [ marker.lng, marker.lat ], zoom: 13});\n        map.flyTo({\n          center: [marker.geometry.coordinates[0], marker.geometry.coordinates[1]],\n          zoom: 13\n        });\n        element.style.opacity = \"1\";\n        element.style.width = '20px';\n        element.style.height = '20px';\n        element.style.boxShadow = \"0px 0px 20px 4px white\";\n        element.style.border = \"3px solid white\";\n        element.style.backgroundImage = \"url('dot-white.png')\";\n        element.style.backgroundColor = \"white\";\n        element.style.position = \"absolute\";\n        var markersElements = document.querySelectorAll('.test');\n        markersElements.forEach(function (marker) {\n          if (marker !== element) {\n            styleDefaultMarker(marker);\n          }\n        });\n      });\n    }); // map.addControl(new MapboxGeocoder({ accessToken: mapboxgl.accessToken }));\n\n    fitMapToMarkers(map, markersGeoJson);\n  }\n};\n\nexport { initMapbox };","map":{"version":3,"sources":["/Users/remibongiovanni/code/BTC1M/rails-out/app/javascript/plugins/init_mapbox.js"],"names":["mapboxgl","MapboxGeocoder","fitMapToMarkers","map","markers","bounds","LngLatBounds","features","forEach","marker","extend","geometry","coordinates","fitBounds","padding","maxZoom","duration","initMapbox","mapElement","document","getElementById","filterGroup","accessToken","dataset","mapboxApiKey","Map","container","style","JSON","parse","markersGeoJson","markersgeojson","inputArray","labelArray","on","addSource","symbol","properties","icon","category","layerID","getLayer","addLayer","input","createElement","type","id","checked","label","setAttribute","textContent","backgroundColor","fontSize","border","margin","borderRadius","boxShadow","push","addEventListener","e","setLayoutProperty","target","menuVisible","menu","preventDefault","stopPropagation","i","length","appendChild","display","popup","Popup","setHTML","infoWindow","styleDefaultMarker","element","className","width","height","position","opacity","Marker","setLngLat","setPopup","addTo","flyTo","center","zoom","backgroundImage","markersElements","querySelectorAll"],"mappings":"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","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n// const fitMapToMarkers = (map, markers) => {\n//   const bounds = new mapboxgl.LngLatBounds();\n//   markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n//   map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n// };\n\nconst fitMapToMarkers = (map, markers) => {\n  const bounds = new mapboxgl.LngLatBounds();\n  markers.features.forEach(marker => bounds.extend([ marker.geometry.coordinates[0], marker.geometry.coordinates[1] ]));\n  map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n};\n\nconst initMapbox = () => {\n  const mapElement = document.getElementById('map');\n\n  var filterGroup = document.getElementById('filter-group');\n\n\n  // Only build a map if there's a div#map to inject into\n  if (mapElement) {\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    const map = new mapboxgl.Map({\n      container: 'map',\n      // style: 'mapbox://styles/mapbox/dark-v10'\n      style: 'mapbox://styles/remiwagon/cjzjn3hsn50nz1cpgqkuhwfn7'\n    });\n\n    const markers = JSON.parse(mapElement.dataset.markers);\n    const markersGeoJson = JSON.parse(mapElement.dataset.markersgeojson);\n\n    // console.log(markers);\n    // console.log(markersGeoJson);\n\n// ----------------------------------------------------\n\n    var inputArray = [];\n    var labelArray = [];\n\n    map.on('load', function() {\n      // Add a GeoJSON source containing place coordinates and information.\n      map.addSource(\"places\", {\n        \"type\": \"geojson\",\n        \"data\": markersGeoJson\n      });\n\n      markersGeoJson.features.forEach(function(marker) {\n        var symbol = marker.properties.icon['icone'];\n        var category = marker.properties['category'];\n        var layerID = category;\n\n        // var el = document.createElement('div');\n        // el.className = 'my-icon';\n\n        // new mapboxgl.Marker(el)\n        //   .setLngLat([ marker.geometry.coordinates[0], marker.geometry.coordinates[1] ])\n        //   .addTo(map);\n\n        // Add a layer for this marker\n        if (!map.getLayer(layerID)) {\n          map.addLayer({\n            \"id\": layerID,\n            \"type\": \"circle\",\n            \"source\": \"places\",\n            \"paint\": {\n              'circle-radius': 8,\n              'circle-opacity': 0.8,\n              'circle-stroke-width': 1,\n              /*'circle-stroke-color': 'white',*/\n              /*'circle-stroke-opacity': 1,*/\n              'circle-color': [\n                'match',\n                ['get', 'category'],\n                'Festival', '#00FFF3',\n                'Rooftop', 'blue',\n                'Open air', '#FF69B4',\n                'Pool Party', 'orange',\n                'Club', '#088C00',\n                'Beach', 'yellow',\n                'Bar', 'red',\n                'Concert', 'purple',\n                /* other */ 'yellow'\n              ]\n            },\n            \"filter\": [\"==\", \"category\", category]\n          });\n\n          // Add checkbox and label elements for the layer.\n          var input = document.createElement('input');\n          input.type = 'checkbox';\n          input.id = layerID;\n          input.checked = true;\n\n          var label = document.createElement('label');\n          label.setAttribute('for', layerID);\n          label.textContent = category;\n          label.style.backgroundColor = 'black';\n          label.style.fontSize = '12px';\n          label.style.border = '2px solid white';\n          label.style.margin = '15px';\n          label.style.borderRadius = '4px';\n          label.style.boxShadow = '2px 2px 0px white';\n\n          inputArray.push(input);\n          labelArray.push(label);\n\n          // When the checkbox changes, update the visibility of the layer.\n          input.addEventListener('change', function(e) {\n            map.setLayoutProperty(layerID, 'visibility',\n              e.target.checked ? 'visible' : 'none');\n          });\n        }\n      });\n\n      // Pour afficher les checkbox lorsqu'on clique sur Filtrer\n      var menuVisible = false;\n      document.getElementById(\"btn-filter-map-id\").addEventListener(\"click\", function(e) {\n        var menu = document.getElementById(\"filter-group\");\n        e.preventDefault();\n        e.stopPropagation();\n        for(let i = 0; i < inputArray.length; i++){\n          filterGroup.appendChild(inputArray[i]);\n          filterGroup.appendChild(labelArray[i]);\n        }\n        if (menuVisible){\n          menu.style.display = \"none\";\n          menuVisible = false;\n        } else {\n          menu.style.display = \"block\";\n          menuVisible = true;\n        }\n      }, false);\n\n    });\n\n\n// ----------------------------------------------------\n\n    markersGeoJson.features.forEach((marker) => {\n\n      const popup = new mapboxgl.Popup().setHTML(marker.properties.infoWindow);\n\n      // Create a HTML element for your custom marker\n      const styleDefaultMarker = (element) => {\n        element.className = 'test';\n        // element.style.backgroundSize = 'contain';\n        element.style.width = '15px';\n        element.style.height = '15px';\n        element.style.boxShadow = \"0px 0px 3px 1px white\";\n        element.style.borderRadius = \"100px\";\n        element.style.border =\"1px solid white\";\n        // element.style.backgroundColor = \"#4d4d4d\";\n        element.style.position = \"absolute\";\n        element.style.opacity = \"1\";\n      }\n\n      const element = document.createElement('div');\n      styleDefaultMarker(element)\n\n      new mapboxgl.Marker(element)\n      .setLngLat([ marker.geometry.coordinates[0], marker.geometry.coordinates[1] ])\n      .setPopup(popup)\n      .addTo(map);\n\n      element.addEventListener('click', function (e) {\n\n        // map.flyTo({center: [ marker.lng, marker.lat ], zoom: 13});\n        map.flyTo({center: [ marker.geometry.coordinates[0], marker.geometry.coordinates[1] ], zoom: 13});\n        element.style.opacity = \"1\";\n        element.style.width = '20px';\n        element.style.height = '20px';\n        element.style.boxShadow = \"0px 0px 20px 4px white\";\n        element.style.border =\"3px solid white\";\n        element.style.backgroundImage = `url('dot-white.png')`;\n        element.style.backgroundColor = \"white\";\n        element.style.position = \"absolute\";\n\n        let markersElements = document.querySelectorAll('.test')\n        markersElements.forEach(marker => {\n          if (marker !== element) {\n            styleDefaultMarker(marker)\n          }\n        } )\n      });\n\n    });\n\n    // map.addControl(new MapboxGeocoder({ accessToken: mapboxgl.accessToken }));\n    fitMapToMarkers(map, markersGeoJson);\n\n  }\n};\n\nexport { initMapbox };\n\n"]},"metadata":{},"sourceType":"module"}