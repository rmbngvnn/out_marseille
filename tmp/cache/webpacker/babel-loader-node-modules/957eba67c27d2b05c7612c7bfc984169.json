{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'; // const fitMapToMarkers = (map, markers) => {\n//   const bounds = new mapboxgl.LngLatBounds();\n//   markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n//   map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n// };\n\nvar initMapbox = function initMapbox() {\n  var mapElement = document.getElementById('map');\n\n  if (mapElement) {\n    // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    var map = new mapboxgl.Map({// container: 'map',\n      // style: 'mapbox://styles/mapbox/dark-v10'\n    });\n    var markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach(function (marker) {\n      var popup = new mapboxgl.Popup().setHTML(marker.infoWindow); // Create a HTML element for your custom marker\n\n      var element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = \"url('\".concat(marker.image_url, \"')\");\n      element.style.backgroundSize = 'contain';\n      element.style.width = '15px';\n      element.style.height = '15px';\n      element.style.boxShadow = \"0px 0px 12px 1px white\";\n      element.style.borderRadius = \"100px\";\n      element.style.border = \"1px solid white\";\n      new mapboxgl.Marker(element).setLngLat([marker.lng, marker.lat]).setPopup(popup).addTo(map);\n    });\n    map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken\n    }));\n    fitMapToMarkers(map, markers);\n  }\n};\n\nexport { initMapbox };","map":{"version":3,"sources":["/Users/remibongiovanni/code/BTC1M/rails-out/app/javascript/plugins/init_mapbox.js"],"names":["mapboxgl","MapboxGeocoder","initMapbox","mapElement","document","getElementById","accessToken","dataset","mapboxApiKey","map","Map","markers","JSON","parse","forEach","marker","popup","Popup","setHTML","infoWindow","element","createElement","className","style","backgroundImage","image_url","backgroundSize","width","height","boxShadow","borderRadius","border","Marker","setLngLat","lng","lat","setPopup","addTo","addControl","fitMapToMarkers"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,4BAA3B,C,CAIA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAnB;;AAEA,MAAIF,UAAJ,EAAgB;AAAE;AAChBH,IAAAA,QAAQ,CAACM,WAAT,GAAuBH,UAAU,CAACI,OAAX,CAAmBC,YAA1C;AACA,QAAMC,GAAG,GAAG,IAAIT,QAAQ,CAACU,GAAb,CAAiB,CAC3B;AACA;AAF2B,KAAjB,CAAZ;AAKA,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWV,UAAU,CAACI,OAAX,CAAmBI,OAA9B,CAAhB;AACAA,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAACC,MAAD,EAAY;AAE1B,UAAMC,KAAK,GAAG,IAAIhB,QAAQ,CAACiB,KAAb,GAAqBC,OAArB,CAA6BH,MAAM,CAACI,UAApC,CAAd,CAF0B,CAI1B;;AACA,UAAMC,OAAO,GAAGhB,QAAQ,CAACiB,aAAT,CAAuB,KAAvB,CAAhB;AACAD,MAAAA,OAAO,CAACE,SAAR,GAAoB,QAApB;AACAF,MAAAA,OAAO,CAACG,KAAR,CAAcC,eAAd,kBAAwCT,MAAM,CAACU,SAA/C;AACAL,MAAAA,OAAO,CAACG,KAAR,CAAcG,cAAd,GAA+B,SAA/B;AACAN,MAAAA,OAAO,CAACG,KAAR,CAAcI,KAAd,GAAsB,MAAtB;AACAP,MAAAA,OAAO,CAACG,KAAR,CAAcK,MAAd,GAAuB,MAAvB;AACAR,MAAAA,OAAO,CAACG,KAAR,CAAcM,SAAd,GAA0B,wBAA1B;AACAT,MAAAA,OAAO,CAACG,KAAR,CAAcO,YAAd,GAA6B,OAA7B;AACAV,MAAAA,OAAO,CAACG,KAAR,CAAcQ,MAAd,GAAsB,iBAAtB;AAGA,UAAI/B,QAAQ,CAACgC,MAAb,CAAoBZ,OAApB,EACGa,SADH,CACa,CAAElB,MAAM,CAACmB,GAAT,EAAcnB,MAAM,CAACoB,GAArB,CADb,EAEGC,QAFH,CAEYpB,KAFZ,EAGGqB,KAHH,CAGS5B,GAHT;AAID,KApBD;AAqBAA,IAAAA,GAAG,CAAC6B,UAAJ,CAAe,IAAIrC,cAAJ,CAAmB;AAAEK,MAAAA,WAAW,EAAEN,QAAQ,CAACM;AAAxB,KAAnB,CAAf;AACAiC,IAAAA,eAAe,CAAC9B,GAAD,EAAME,OAAN,CAAf;AACD;AACF,CAnCD;;AAqCA,SAAST,UAAT","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\n\n// const fitMapToMarkers = (map, markers) => {\n//   const bounds = new mapboxgl.LngLatBounds();\n//   markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n//   map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n// };\n\nconst initMapbox = () => {\n  const mapElement = document.getElementById('map');\n\n  if (mapElement) { // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    const map = new mapboxgl.Map({\n      // container: 'map',\n      // style: 'mapbox://styles/mapbox/dark-v10'\n    });\n\n    const markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach((marker) => {\n\n      const popup = new mapboxgl.Popup().setHTML(marker.infoWindow);\n\n      // Create a HTML element for your custom marker\n      const element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = `url('${marker.image_url}')`;\n      element.style.backgroundSize = 'contain';\n      element.style.width = '15px';\n      element.style.height = '15px';\n      element.style.boxShadow = \"0px 0px 12px 1px white\"\n      element.style.borderRadius = \"100px\"\n      element.style.border =\"1px solid white\"\n\n\n      new mapboxgl.Marker(element)\n        .setLngLat([ marker.lng, marker.lat ])\n        .setPopup(popup)\n        .addTo(map);\n    });\n    map.addControl(new MapboxGeocoder({ accessToken: mapboxgl.accessToken }));\n    fitMapToMarkers(map, markers);\n  }\n};\n\nexport { initMapbox };\n\n\n"]},"metadata":{},"sourceType":"module"}