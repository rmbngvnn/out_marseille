{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'; // const fitMapToMarkers = (map, markers) => {\n//   const bounds = new mapboxgl.LngLatBounds();\n//   markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n//   map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n// };\n// const initMapbox = () => {\n//   const mapElement = document.getElementById('map');\n//   if (mapElement) { // only build a map if there's a div#map to inject into\n//     mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n//     const map = new mapboxgl.Map({\n//       container: 'map',\n//       style: 'mapbox://styles/mapbox/dark-v10'\n//     });\n//     const markers = JSON.parse(mapElement.dataset.markers);\n//     markers.forEach((marker) => {\n//       const popup = new mapboxgl.Popup().setHTML(marker.infoWindow);\n//       // Create a HTML element for your custom marker\n//       const element = document.createElement('div');\n//       element.className = 'marker';\n//       element.style.backgroundImage = `url('${marker.image_url}')`;\n//       element.style.backgroundSize = 'contain';\n//       element.style.width = '15px';\n//       element.style.height = '15px';\n//       element.style.boxShadow = \"0px 0px 12px 1px white\"\n//       element.style.borderRadius = \"100px\"\n//       element.style.border =\"1px solid white\"\n//       new mapboxgl.Marker(element)\n//         .setLngLat([ marker.lng, marker.lat ])\n//         .setPopup(popup)\n//         .addTo(map);\n//     });\n//     map.addControl(new MapboxGeocoder({ accessToken: mapboxgl.accessToken }));\n//     fitMapToMarkers(map, markers);\n//   }\n// };\n// export { initMapbox };\n// --------------------------------------------\n\nvar mapElement = document.getElementById('map');\n\nvar buildMap = function buildMap() {\n  mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n  return new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v10'\n  });\n};\n\nvar addMarkersToMap = function addMarkersToMap(map, markers) {\n  markers.forEach(function (marker) {\n    var popup = new mapboxgl.Popup().setHTML(marker.infoWindow); // add this\n\n    new mapboxgl.Marker().setLngLat([marker.lng, marker.lat]).setPopup(popup) // add this\n    .addTo(map);\n  });\n};\n\nvar fitMapToMarkers = function fitMapToMarkers(map, markers) {\n  var bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(function (marker) {\n    return bounds.extend([marker.lng, marker.lat]);\n  });\n  map.fitBounds(bounds, {\n    padding: 70,\n    maxZoom: 15\n  });\n};\n\nvar initMapbox = function initMapbox() {\n  if (mapElement) {\n    var map = buildMap();\n    var markers = JSON.parse(mapElement.dataset.markers);\n    addMarkersToMap(map, markers);\n    fitMapToMarkers(map, markers);\n  }\n};\n\nexport { initMapbox };","map":{"version":3,"sources":["/Users/remibongiovanni/code/BTC1M/rails-out/app/javascript/plugins/init_mapbox.js"],"names":["mapboxgl","MapboxGeocoder","mapElement","document","getElementById","buildMap","accessToken","dataset","mapboxApiKey","Map","container","style","addMarkersToMap","map","markers","forEach","marker","popup","Popup","setHTML","infoWindow","Marker","setLngLat","lng","lat","setPopup","addTo","fitMapToMarkers","bounds","LngLatBounds","extend","fitBounds","padding","maxZoom","initMapbox","JSON","parse"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,4BAA3B,C,CAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;;AAGA,IAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAnB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBL,EAAAA,QAAQ,CAACM,WAAT,GAAuBJ,UAAU,CAACK,OAAX,CAAmBC,YAA1C;AACA,SAAO,IAAIR,QAAQ,CAACS,GAAb,CAAiB;AACtBC,IAAAA,SAAS,EAAE,KADW;AAEtBC,IAAAA,KAAK,EAAE;AAFe,GAAjB,CAAP;AAID,CAND;;AAQA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,OAAN,EAAkB;AACxCA,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,MAAD,EAAY;AAC1B,QAAMC,KAAK,GAAG,IAAIjB,QAAQ,CAACkB,KAAb,GAAqBC,OAArB,CAA6BH,MAAM,CAACI,UAApC,CAAd,CAD0B,CACqC;;AAE/D,QAAIpB,QAAQ,CAACqB,MAAb,GACGC,SADH,CACa,CAAEN,MAAM,CAACO,GAAT,EAAcP,MAAM,CAACQ,GAArB,CADb,EAEGC,QAFH,CAEYR,KAFZ,EAEmB;AAFnB,KAGGS,KAHH,CAGSb,GAHT;AAID,GAPD;AAQD,CATD;;AAWA,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAACd,GAAD,EAAMC,OAAN,EAAkB;AACxC,MAAMc,MAAM,GAAG,IAAI5B,QAAQ,CAAC6B,YAAb,EAAf;AACAf,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAAAC,MAAM;AAAA,WAAIY,MAAM,CAACE,MAAP,CAAc,CAAEd,MAAM,CAACO,GAAT,EAAcP,MAAM,CAACQ,GAArB,CAAd,CAAJ;AAAA,GAAtB;AACAX,EAAAA,GAAG,CAACkB,SAAJ,CAAcH,MAAd,EAAsB;AAAEI,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,OAAO,EAAE;AAAxB,GAAtB;AACD,CAJD;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAIhC,UAAJ,EAAgB;AACd,QAAMW,GAAG,GAAGR,QAAQ,EAApB;AACA,QAAMS,OAAO,GAAGqB,IAAI,CAACC,KAAL,CAAWlC,UAAU,CAACK,OAAX,CAAmBO,OAA9B,CAAhB;AACAF,IAAAA,eAAe,CAACC,GAAD,EAAMC,OAAN,CAAf;AACAa,IAAAA,eAAe,CAACd,GAAD,EAAMC,OAAN,CAAf;AACD;AACF,CAPD;;AAWA,SAASoB,UAAT","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\n// const fitMapToMarkers = (map, markers) => {\n//   const bounds = new mapboxgl.LngLatBounds();\n//   markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n//   map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n// };\n\n// const initMapbox = () => {\n//   const mapElement = document.getElementById('map');\n\n//   if (mapElement) { // only build a map if there's a div#map to inject into\n//     mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n//     const map = new mapboxgl.Map({\n//       container: 'map',\n//       style: 'mapbox://styles/mapbox/dark-v10'\n//     });\n\n//     const markers = JSON.parse(mapElement.dataset.markers);\n//     markers.forEach((marker) => {\n\n//       const popup = new mapboxgl.Popup().setHTML(marker.infoWindow);\n\n//       // Create a HTML element for your custom marker\n//       const element = document.createElement('div');\n//       element.className = 'marker';\n//       element.style.backgroundImage = `url('${marker.image_url}')`;\n//       element.style.backgroundSize = 'contain';\n//       element.style.width = '15px';\n//       element.style.height = '15px';\n//       element.style.boxShadow = \"0px 0px 12px 1px white\"\n//       element.style.borderRadius = \"100px\"\n//       element.style.border =\"1px solid white\"\n\n\n//       new mapboxgl.Marker(element)\n//         .setLngLat([ marker.lng, marker.lat ])\n//         .setPopup(popup)\n//         .addTo(map);\n//     });\n//     map.addControl(new MapboxGeocoder({ accessToken: mapboxgl.accessToken }));\n//     fitMapToMarkers(map, markers);\n//   }\n\n\n// };\n\n\n\n// export { initMapbox };\n\n// --------------------------------------------\n\n\nconst mapElement = document.getElementById('map');\n\nconst buildMap = () => {\n  mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n  return new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/streets-v10'\n  });\n};\n\nconst addMarkersToMap = (map, markers) => {\n  markers.forEach((marker) => {\n    const popup = new mapboxgl.Popup().setHTML(marker.infoWindow); // add this\n\n    new mapboxgl.Marker()\n      .setLngLat([ marker.lng, marker.lat ])\n      .setPopup(popup) // add this\n      .addTo(map);\n  });\n};\n\nconst fitMapToMarkers = (map, markers) => {\n  const bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n  map.fitBounds(bounds, { padding: 70, maxZoom: 15 });\n};\n\nconst initMapbox = () => {\n  if (mapElement) {\n    const map = buildMap();\n    const markers = JSON.parse(mapElement.dataset.markers);\n    addMarkersToMap(map, markers);\n    fitMapToMarkers(map, markers);\n  }\n};\n\n\n\nexport { initMapbox };\n\n"]},"metadata":{},"sourceType":"module"}