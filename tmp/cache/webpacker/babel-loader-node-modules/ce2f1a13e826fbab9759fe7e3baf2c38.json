{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\nvar fitMapToMarkers = function fitMapToMarkers(map, markers) {\n  var bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(function (marker) {\n    return bounds.extend([marker.lng, marker.lat]);\n  });\n  map.fitBounds(bounds, {\n    padding: 70,\n    maxZoom: 15,\n    duration: 0\n  });\n};\n\nmap.on('click', 'symbols', function (e) {\n  map.flyTo({\n    center: e.features[0].geometry.coordinates\n  });\n});\n\nvar initMapbox = function initMapbox() {\n  var mapElement = document.getElementById('map');\n\n  if (mapElement) {\n    // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n\n    var _map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/dark-v10'\n    });\n\n    var markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach(function (marker) {\n      var popup = new mapboxgl.Popup().setHTML(marker.infoWindow); // Create a HTML element for your custom marker\n\n      var element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = \"url('\".concat(marker.image_url, \"')\");\n      element.style.backgroundSize = 'contain';\n      element.style.width = '15px';\n      element.style.height = '15px';\n      element.style.boxShadow = \"0px 0px 12px 1px white\";\n      element.style.borderRadius = \"100px\";\n      element.style.border = \"1px solid white\";\n      new mapboxgl.Marker(element).setLngLat([marker.lng, marker.lat]).setPopup(popup).addTo(_map);\n    });\n\n    _map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken\n    }));\n\n    fitMapToMarkers(_map, markers);\n  }\n};\n\nexport { initMapbox };","map":{"version":3,"sources":["/Users/remibongiovanni/code/BTC1M/rails-out/app/javascript/plugins/init_mapbox.js"],"names":["mapboxgl","MapboxGeocoder","fitMapToMarkers","map","markers","bounds","LngLatBounds","forEach","marker","extend","lng","lat","fitBounds","padding","maxZoom","duration","on","e","flyTo","center","features","geometry","coordinates","initMapbox","mapElement","document","getElementById","accessToken","dataset","mapboxApiKey","Map","container","style","JSON","parse","popup","Popup","setHTML","infoWindow","element","createElement","className","backgroundImage","image_url","backgroundSize","width","height","boxShadow","borderRadius","border","Marker","setLngLat","setPopup","addTo","addControl"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAIA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,OAAN,EAAkB;AACxC,MAAMC,MAAM,GAAG,IAAIL,QAAQ,CAACM,YAAb,EAAf;AACAF,EAAAA,OAAO,CAACG,OAAR,CAAgB,UAAAC,MAAM;AAAA,WAAIH,MAAM,CAACI,MAAP,CAAc,CAAED,MAAM,CAACE,GAAT,EAAcF,MAAM,CAACG,GAArB,CAAd,CAAJ;AAAA,GAAtB;AACAR,EAAAA,GAAG,CAACS,SAAJ,CAAcP,MAAd,EAAsB;AAAEQ,IAAAA,OAAO,EAAE,EAAX;AAAeC,IAAAA,OAAO,EAAE,EAAxB;AAA4BC,IAAAA,QAAQ,EAAE;AAAtC,GAAtB;AACD,CAJD;;AAMAZ,GAAG,CAACa,EAAJ,CAAO,OAAP,EAAgB,SAAhB,EAA2B,UAAUC,CAAV,EAAa;AACxCd,EAAAA,GAAG,CAACe,KAAJ,CAAU;AAACC,IAAAA,MAAM,EAAEF,CAAC,CAACG,QAAF,CAAW,CAAX,EAAcC,QAAd,CAAuBC;AAAhC,GAAV;AACC,CAFD;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAnB;;AAEA,MAAIF,UAAJ,EAAgB;AAAE;AAChBxB,IAAAA,QAAQ,CAAC2B,WAAT,GAAuBH,UAAU,CAACI,OAAX,CAAmBC,YAA1C;;AACA,QAAM1B,IAAG,GAAG,IAAIH,QAAQ,CAAC8B,GAAb,CAAiB;AAC3BC,MAAAA,SAAS,EAAE,KADgB;AAE3BC,MAAAA,KAAK,EAAE;AAFoB,KAAjB,CAAZ;;AAKA,QAAM5B,OAAO,GAAG6B,IAAI,CAACC,KAAL,CAAWV,UAAU,CAACI,OAAX,CAAmBxB,OAA9B,CAAhB;AACAA,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAACC,MAAD,EAAY;AAE1B,UAAM2B,KAAK,GAAG,IAAInC,QAAQ,CAACoC,KAAb,GAAqBC,OAArB,CAA6B7B,MAAM,CAAC8B,UAApC,CAAd,CAF0B,CAI1B;;AACA,UAAMC,OAAO,GAAGd,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAhB;AACAD,MAAAA,OAAO,CAACE,SAAR,GAAoB,QAApB;AACAF,MAAAA,OAAO,CAACP,KAAR,CAAcU,eAAd,kBAAwClC,MAAM,CAACmC,SAA/C;AACAJ,MAAAA,OAAO,CAACP,KAAR,CAAcY,cAAd,GAA+B,SAA/B;AACAL,MAAAA,OAAO,CAACP,KAAR,CAAca,KAAd,GAAsB,MAAtB;AACAN,MAAAA,OAAO,CAACP,KAAR,CAAcc,MAAd,GAAuB,MAAvB;AACAP,MAAAA,OAAO,CAACP,KAAR,CAAce,SAAd,GAA0B,wBAA1B;AACAR,MAAAA,OAAO,CAACP,KAAR,CAAcgB,YAAd,GAA6B,OAA7B;AACAT,MAAAA,OAAO,CAACP,KAAR,CAAciB,MAAd,GAAsB,iBAAtB;AAGA,UAAIjD,QAAQ,CAACkD,MAAb,CAAoBX,OAApB,EACGY,SADH,CACa,CAAE3C,MAAM,CAACE,GAAT,EAAcF,MAAM,CAACG,GAArB,CADb,EAEGyC,QAFH,CAEYjB,KAFZ,EAGGkB,KAHH,CAGSlD,IAHT;AAID,KApBD;;AAqBAA,IAAAA,IAAG,CAACmD,UAAJ,CAAe,IAAIrD,cAAJ,CAAmB;AAAE0B,MAAAA,WAAW,EAAE3B,QAAQ,CAAC2B;AAAxB,KAAnB,CAAf;;AACAzB,IAAAA,eAAe,CAACC,IAAD,EAAMC,OAAN,CAAf;AAED;AACF,CApCD;;AAuCA,SAASmB,UAAT","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\n\nconst fitMapToMarkers = (map, markers) => {\n  const bounds = new mapboxgl.LngLatBounds();\n  markers.forEach(marker => bounds.extend([ marker.lng, marker.lat ]));\n  map.fitBounds(bounds, { padding: 70, maxZoom: 15, duration: 0 });\n};\n\nmap.on('click', 'symbols', function (e) {\nmap.flyTo({center: e.features[0].geometry.coordinates});\n});\n\nconst initMapbox = () => {\n  const mapElement = document.getElementById('map');\n\n  if (mapElement) { // only build a map if there's a div#map to inject into\n    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;\n    const map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/dark-v10'\n    });\n\n    const markers = JSON.parse(mapElement.dataset.markers);\n    markers.forEach((marker) => {\n\n      const popup = new mapboxgl.Popup().setHTML(marker.infoWindow);\n\n      // Create a HTML element for your custom marker\n      const element = document.createElement('div');\n      element.className = 'marker';\n      element.style.backgroundImage = `url('${marker.image_url}')`;\n      element.style.backgroundSize = 'contain';\n      element.style.width = '15px';\n      element.style.height = '15px';\n      element.style.boxShadow = \"0px 0px 12px 1px white\"\n      element.style.borderRadius = \"100px\"\n      element.style.border =\"1px solid white\"\n\n\n      new mapboxgl.Marker(element)\n        .setLngLat([ marker.lng, marker.lat ])\n        .setPopup(popup)\n        .addTo(map);\n    });\n    map.addControl(new MapboxGeocoder({ accessToken: mapboxgl.accessToken }));\n    fitMapToMarkers(map, markers);\n\n  }\n};\n\n\nexport { initMapbox };\n\n"]},"metadata":{},"sourceType":"module"}